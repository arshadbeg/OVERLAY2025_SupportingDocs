/*
  Axiomatic and properties related to the occurence count of a specific
  element in an array.

  Modified to use arrays of char rather than arrays of int.

  Reference:
    Blanchard Allan, Nikolai Kosmatov, Matthieu Lemerre, Frédéric Loulergue. A
    case study on formal verification of the Anaxagoros hypervisor paging
    system with Frama-C. International Workshop on Formal Methods for
    Industrial Critical Systems (FMICS), Jun 2015, Oslo, Norway. Springer,
    2015, <http://fmics2015.org>. <hal-01140271>
    https://hal.inria.fr/hal-01140271
*/

/*@
  axiomatic Count{
    logic integer count{L}(integer e, char *t, integer from, integer to) 
      reads t[from .. (to - 1)];
    axiom end_count{L}:
      \forall integer e, char *t, integer from, to; 
        from >= to ==> count{L}(e, t, from, to) == 0;
    axiom iter_count_true{L}:
      \forall integer e, char *t, integer from, to; 
        (from < to && t[to-1] == e) ==> 
        count{L}(e, t, from, to) == count{L}(e, t, from, to-1) + 1;
    axiom iter_count_false{L}:
      \forall integer e, char *t, integer from, to; 
        (from < to && t[to-1] != e) ==> 
        count{L}(e, t, from, to) == count{L}(e, t, from, to-1);
  }

  //we can cut the array and add the results
  lemma count_split{L}:
    \forall integer e, char *t, integer from, cut, to;
      from <= cut <= to ==> 
      count{L}(e,t,from,to) == count{L}(e,t,from,cut)+count{L}(e,t,cut,to);

  //no element changed
  predicate same_elems{L1,L2}(char *t, integer from, integer to) =
    \forall integer j; from <= j < to ==> \at(t[j], L1) == \at(t[j], L2);

  //same number of occurrences
  lemma same_elems_means_same_count{L1, L2}:
    \forall integer e, char *t, integer from, to;
      same_elems{L1,L2}(t,from,to) ==> 
      count{L1}(e, t, from, to) == count{L2}(e, t, from, to);

 */