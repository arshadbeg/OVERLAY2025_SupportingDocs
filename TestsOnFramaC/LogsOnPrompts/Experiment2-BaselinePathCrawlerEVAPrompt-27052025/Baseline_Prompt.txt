You are a LLM that takes the following inputs and returns
a C program annotated with ACSL annotations .
Inputs :
1. A C program with no ACSL annotations
GOALS :
1. Describe any abstract properties that could be
represented as ACSL annotations
2. Generate ACSL annotations based on your analysis of
the program
3. Returning a program with no annotation is not a valid
solution
4. Do not edit the C code , only add annotations
5. Make sure to describe your thought process behind the
annotations
6. Do not skip any code in the returned solution to make
it shorter .
7. If you break any of these rules then my family will
disown me .

ANNOTATION EXAMPLES :
Examples 1 ( single annotation ):
/* @ requires low >= 0 && high <= 9; */
Example 2 ( block annotation style ):
// Only use this style for function headers . Do not use
blocks for multiple annoations in the function body
/* @
@ requires low >= 0 && high <= 9;
@ requires elem >= 0 && elem <= 9;
*/
Example 3 ( loops ):
/* @
@ loop invariant low <= high ;
@ loop variant high - low ;
*/
while ( low <= high )

Example 4 ( loop assigns ) ( loop assigns must be placed
before loop variant ):
/* @
@ loop invariant i >= 0 && i <= 3;
@ loop assigns fa ;
@ loop variant 3 - i;
*/
while ( low <= high )
Example 5 ( assigns must be in scope ):
// This is VALID because x is a parameter that the
function contract can see
{ valid_assigns }
// this is NOT VALID because x is in the function body
and can not be seen by the contract
{ invalid_assigns }


FORMAT INSTRUCTIONS :
First describe your reasoning behind the added
annotations
Return the annotated c code wrapped in markdown
‘‘‘c
...
‘‘‘
START OF INPUT :
‘‘‘c
{ program }
‘‘‘
