===========
Summary Tab
===========
General
Test data
Function under test	Tritype
Coverage criterion	all-path
Termination status	normally
Coverage
Branch coverage
Tritype (tritype.c)	100.00%
Statistics
Generated test cases
success	0
failure	0
unknown	11
Total	11
Partial paths
covered	11
infeasible	8
Total	19

============
Coverage Tab
============

Tritype (tritype.c)
Subcondition		
10	1	2
10b	11	2
10c	10	2
12	9	2
12b	8	2
12c	2	3
14	6	3
15	5	3
16	4	3
17	7	3

============
Test Log Tab
============

Time	Level	Message
Mon May 26 15:40:05 CEST 2025	INFO	
Instrumentation for function Tritype
Mon May 26 15:40:06 CEST 2025	INFO	
analysis...
[kernel] preprocessing with "gcc -c -e -i.  tritype.c"
[kernel] preprocessing with "gcc -c -e -i. -include /home/pco_user/myusr/pathcrawler/lib/lanceur_deb.h -m32 -lm -w -undef tritype.c"
[pc] analyzing...
Mon May 26 15:40:06 CEST 2025	INFO	
Test harness compilation for function Tritype
Mon May 26 15:40:06 CEST 2025	INFO	
compiling pathcrawler_tritype/lanceur_tritype utilities ...
compiling pathcrawler_tritype/lanceur_tritype...
Mon May 26 15:40:06 CEST 2025	INFO	
Preparing test generation environment
Mon May 26 15:40:06 CEST 2025	INFO	
Test generation for function Tritype started
Mon May 26 15:40:06 CEST 2025	INFO	
Copying on the fly
Mon May 26 15:40:14 CEST 2025	INFO	
Test generation for function Tritype done (completed or interrupted)
Mon May 26 15:40:14 CEST 2025	INFO	
Copying final results and deleting temporary files
Mon May 26 15:40:14 CEST 2025	INFO	
Test generation output
Mon May 26 15:40:14 CEST 2025	INFO	
generating tests...
[pc] starting lanceur_tritype (usc version) 

================
Test Case 1 Tabs
================

Path
tritype.c:+10

Input Values
i	=	-196
j	=	364
k	=	18

Output Values
	Concrete value	Symbolic value
return value	3	3

Verdict
Unknown

Test driver

/************TEST DRIVER FOR TEST CASE 1 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = -196;
j__Tritype = 364;
k__Tritype = 18;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i<0

===============
Test Case 2 Tab
===============

Path
tritype.c:-10:-10b:-10c:-12:-12b:+12c

Input Values
i	=	260
j	=	364
k	=	18

Output Values
Concrete value	Symbolic value
return value	3	3

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 2 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 260;
j__Tritype = 364;
k__Tritype = 18;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path Predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)=<j

================
Test Case 3 Tabs
================

Path
tritype.c:-10:-10b:-10c:-12:-12b:-12c:-14:-15:-16:-17

Input Values
i	=	197
j	=	940
k	=	1087

Output Values
Concrete value	Symbolic value
return value	0	0

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 3 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 197;
j__Tritype = 940;
k__Tritype = 1087;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)>j
i<>j
i<>k
j<>k

================
Test Case 4 Tabs
================
Path
tritype.c:-10:-10b:-10c:-12:-12b:-12c:-14:-15:+16:-17

Input Values
i	=	886.99999999999989
j	=	986
k	=	986

Output Values
Concrete value	Symbolic value
return value	1	1

Verdict 
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 4 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 886.99999999999989;
j__Tritype = 986;
k__Tritype = 986;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)>j
i<>j
i<>k
j=k

================
Test Case 5 Tabs
================

Path
tritype.c:-10:-10b:-10c:-12:-12b:-12c:-14:+15:-16:-17

Input Values
i	=	952
j	=	990
k	=	952

Output Values
Concrete value	Symbolic value
return value	1	1

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 5 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 952;
j__Tritype = 990;
k__Tritype = 952;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)>j
i<>j
i=k
j<>k

================
Test Case 6 Tabs
================
Path
tritype.c:-10:-10b:-10c:-12:-12b:-12c:+14:-15:-16:-17

Input Values
i	=	108
j	=	108
k	=	177

Output Values
Concrete value	Symbolic value
return value	1	1

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 6 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 108;
j__Tritype = 108;
k__Tritype = 177;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)>j
i=j
i<>k
j<>k

================
Test Case 7 Tabs
================

Path
tritype.c:-10:-10b:-10c:-12:-12b:-12c:+14:+15:+16:+17

Input Values
i	=	646
j	=	646
k	=	646

Output Values
Concrete value	Symbolic value
return value	2	2

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 7 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 646;
j__Tritype = 646;
k__Tritype = 646;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)>i
(i+k)>j
i=j
i=k

================
Test Case 8 Tabs
================

Path
tritype.c:-10:-10b:-10c:-12:+12b

Input Values
i	=	232
j	=	67
k	=	158

Output Values
Concrete value	Symbolic value
return value	3	3

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 8 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 232;
j__Tritype = 67;
k__Tritype = 158;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k>=0
(j+i)>k
(k+j)=<i

================
Test Case 9 Tabs
================

Path
tritype.c:-10:-10b:-10c:+12

Input Values
i	=	96
j	=	457.00000000000006
k	=	1530

Output Values
Concrete value	Symbolic value
return value	3	3

Verdict
unknown

Path predicate
i>=0
j>=0
k>=0
(j+i)=<k

=================
Test Case 10 Tabs
=================

Path
tritype.c:-10:-10b:+10c

Input Values
i	=	260
j	=	364
k	=	-886

Output Values
Concrete value	Symbolic value
return value	3	3

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 10 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 260;
j__Tritype = 364;
k__Tritype = -886;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j>=0
k<0

=================
Test Case 11 Tabs
=================

Path
tritype.c:-10:+10b

Input Values
i	=	260
j	=	-533
k	=	18

Output Values
Concrete value	Symbolic value
return value	3	3

Verdict
unknown

Test Driver
/************TEST DRIVER FOR TEST CASE 11 *************/
/* Generated by the PathCrawler test generation tool */
#include <stdio.h>
#include <stdlib.h>
#include"td_assume.h"
#include "../../../tritype.c"
#include "../../../pathcrawler_tritype/lanceur_Tritype_params.h"


int main()
{
//declarations
//allocations
//assignments
i__Tritype = 260;
j__Tritype = -533;
k__Tritype = 18;
//function call
Tritype(i__Tritype, j__Tritype, k__Tritype);
//desallocation
//end
}

Path predicate
i>=0
j<0